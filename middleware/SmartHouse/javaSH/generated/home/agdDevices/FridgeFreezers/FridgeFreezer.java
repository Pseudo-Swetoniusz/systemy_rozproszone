//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.7
//
// <auto-generated>
//
// Generated from file `device.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package home.agdDevices.FridgeFreezers;

public interface FridgeFreezer extends Fridge,
                                       Freezer
{
    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::home::Device",
        "::home::agdDevices::AGD",
        "::home::agdDevices::FridgeFreezers::Freezer",
        "::home::agdDevices::FridgeFreezers::Fridge",
        "::home::agdDevices::FridgeFreezers::FridgeFreezer"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::home::agdDevices::FridgeFreezers::FridgeFreezer";
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "getDeviceName",
        "getFreezerTemp",
        "getFridgeTemp",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "isOn",
        "setFreezerTemp",
        "setFridgeTemp",
        "startDevice",
        "stopDevice"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return home.Device._iceD_getDeviceName(this, in, current);
            }
            case 1:
            {
                return Freezer._iceD_getFreezerTemp(this, in, current);
            }
            case 2:
            {
                return Fridge._iceD_getFridgeTemp(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 5:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 6:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 7:
            {
                return home.agdDevices.AGD._iceD_isOn(this, in, current);
            }
            case 8:
            {
                return Freezer._iceD_setFreezerTemp(this, in, current);
            }
            case 9:
            {
                return Fridge._iceD_setFridgeTemp(this, in, current);
            }
            case 10:
            {
                return home.agdDevices.AGD._iceD_startDevice(this, in, current);
            }
            case 11:
            {
                return home.agdDevices.AGD._iceD_stopDevice(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
