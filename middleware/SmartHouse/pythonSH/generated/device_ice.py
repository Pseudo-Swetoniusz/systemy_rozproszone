# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.7
#
# <auto-generated>
#
# Generated from file `device.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module home
_M_home = Ice.openModule('home')
__name__ = 'home'

if 'Date' not in _M_home.__dict__:
    _M_home.Date = Ice.createTempClass()
    class Date(object):
        def __init__(self, day=0, month=0, year=0):
            self.day = day
            self.month = month
            self.year = year

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.day)
            _h = 5 * _h + Ice.getHash(self.month)
            _h = 5 * _h + Ice.getHash(self.year)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_home.Date):
                return NotImplemented
            else:
                if self.day is None or other.day is None:
                    if self.day != other.day:
                        return (-1 if self.day is None else 1)
                else:
                    if self.day < other.day:
                        return -1
                    elif self.day > other.day:
                        return 1
                if self.month is None or other.month is None:
                    if self.month != other.month:
                        return (-1 if self.month is None else 1)
                else:
                    if self.month < other.month:
                        return -1
                    elif self.month > other.month:
                        return 1
                if self.year is None or other.year is None:
                    if self.year != other.year:
                        return (-1 if self.year is None else 1)
                else:
                    if self.year < other.year:
                        return -1
                    elif self.year > other.year:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_home._t_Date)

        __repr__ = __str__

    _M_home._t_Date = IcePy.defineStruct('::home::Date', Date, (), (
        ('day', (), IcePy._t_short),
        ('month', (), IcePy._t_short),
        ('year', (), IcePy._t_short)
    ))

    _M_home.Date = Date
    del Date

if 'Time' not in _M_home.__dict__:
    _M_home.Time = Ice.createTempClass()
    class Time(object):
        def __init__(self, hour=0, minute=0, second=0):
            self.hour = hour
            self.minute = minute
            self.second = second

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.hour)
            _h = 5 * _h + Ice.getHash(self.minute)
            _h = 5 * _h + Ice.getHash(self.second)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_home.Time):
                return NotImplemented
            else:
                if self.hour is None or other.hour is None:
                    if self.hour != other.hour:
                        return (-1 if self.hour is None else 1)
                else:
                    if self.hour < other.hour:
                        return -1
                    elif self.hour > other.hour:
                        return 1
                if self.minute is None or other.minute is None:
                    if self.minute != other.minute:
                        return (-1 if self.minute is None else 1)
                else:
                    if self.minute < other.minute:
                        return -1
                    elif self.minute > other.minute:
                        return 1
                if self.second is None or other.second is None:
                    if self.second != other.second:
                        return (-1 if self.second is None else 1)
                else:
                    if self.second < other.second:
                        return -1
                    elif self.second > other.second:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_home._t_Time)

        __repr__ = __str__

    _M_home._t_Time = IcePy.defineStruct('::home::Time', Time, (), (
        ('hour', (), IcePy._t_short),
        ('minute', (), IcePy._t_short),
        ('second', (), IcePy._t_short)
    ))

    _M_home.Time = Time
    del Time

if 'DateTime' not in _M_home.__dict__:
    _M_home.DateTime = Ice.createTempClass()
    class DateTime(object):
        def __init__(self, t=Ice._struct_marker, d=Ice._struct_marker):
            if t is Ice._struct_marker:
                self.t = _M_home.Time()
            else:
                self.t = t
            if d is Ice._struct_marker:
                self.d = _M_home.Date()
            else:
                self.d = d

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.t)
            _h = 5 * _h + Ice.getHash(self.d)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_home.DateTime):
                return NotImplemented
            else:
                if self.t is None or other.t is None:
                    if self.t != other.t:
                        return (-1 if self.t is None else 1)
                else:
                    if self.t < other.t:
                        return -1
                    elif self.t > other.t:
                        return 1
                if self.d is None or other.d is None:
                    if self.d != other.d:
                        return (-1 if self.d is None else 1)
                else:
                    if self.d < other.d:
                        return -1
                    elif self.d > other.d:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_home._t_DateTime)

        __repr__ = __str__

    _M_home._t_DateTime = IcePy.defineStruct('::home::DateTime', DateTime, (), (
        ('t', (), _M_home._t_Time),
        ('d', (), _M_home._t_Date)
    ))

    _M_home.DateTime = DateTime
    del DateTime

_M_home._t_Device = IcePy.defineValue('::home::Device', Ice.Value, -1, (), False, True, None, ())

if 'DevicePrx' not in _M_home.__dict__:
    _M_home.DevicePrx = Ice.createTempClass()
    class DevicePrx(Ice.ObjectPrx):

        def getDeviceName(self, context=None):
            return _M_home.Device._op_getDeviceName.invoke(self, ((), context))

        def getDeviceNameAsync(self, context=None):
            return _M_home.Device._op_getDeviceName.invokeAsync(self, ((), context))

        def begin_getDeviceName(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.Device._op_getDeviceName.begin(self, ((), _response, _ex, _sent, context))

        def end_getDeviceName(self, _r):
            return _M_home.Device._op_getDeviceName.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_home.DevicePrx.ice_checkedCast(proxy, '::home::Device', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_home.DevicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::home::Device'
    _M_home._t_DevicePrx = IcePy.defineProxy('::home::Device', DevicePrx)

    _M_home.DevicePrx = DevicePrx
    del DevicePrx

    _M_home.Device = Ice.createTempClass()
    class Device(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::home::Device')

        def ice_id(self, current=None):
            return '::home::Device'

        @staticmethod
        def ice_staticId():
            return '::home::Device'

        def getDeviceName(self, current=None):
            raise NotImplementedError("servant method 'getDeviceName' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_home._t_DeviceDisp)

        __repr__ = __str__

    _M_home._t_DeviceDisp = IcePy.defineClass('::home::Device', Device, (), None, ())
    Device._ice_type = _M_home._t_DeviceDisp

    Device._op_getDeviceName = IcePy.Operation('getDeviceName', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())

    _M_home.Device = Device
    del Device

# Start of module home.controls
_M_home.controls = Ice.openModule('home.controls')
__name__ = 'home.controls'

_M_home.controls._t_TempControl = IcePy.defineValue('::home::controls::TempControl', Ice.Value, -1, (), False, True, None, ())

if 'TempControlPrx' not in _M_home.controls.__dict__:
    _M_home.controls.TempControlPrx = Ice.createTempClass()
    class TempControlPrx(_M_home.DevicePrx):

        def readTemp(self, context=None):
            return _M_home.controls.TempControl._op_readTemp.invoke(self, ((), context))

        def readTempAsync(self, context=None):
            return _M_home.controls.TempControl._op_readTemp.invokeAsync(self, ((), context))

        def begin_readTemp(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.controls.TempControl._op_readTemp.begin(self, ((), _response, _ex, _sent, context))

        def end_readTemp(self, _r):
            return _M_home.controls.TempControl._op_readTemp.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_home.controls.TempControlPrx.ice_checkedCast(proxy, '::home::controls::TempControl', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_home.controls.TempControlPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::home::controls::TempControl'
    _M_home.controls._t_TempControlPrx = IcePy.defineProxy('::home::controls::TempControl', TempControlPrx)

    _M_home.controls.TempControlPrx = TempControlPrx
    del TempControlPrx

    _M_home.controls.TempControl = Ice.createTempClass()
    class TempControl(_M_home.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::home::Device', '::home::controls::TempControl')

        def ice_id(self, current=None):
            return '::home::controls::TempControl'

        @staticmethod
        def ice_staticId():
            return '::home::controls::TempControl'

        def readTemp(self, current=None):
            raise NotImplementedError("servant method 'readTemp' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_home.controls._t_TempControlDisp)

        __repr__ = __str__

    _M_home.controls._t_TempControlDisp = IcePy.defineClass('::home::controls::TempControl', TempControl, (), None, (_M_home._t_DeviceDisp,))
    TempControl._ice_type = _M_home.controls._t_TempControlDisp

    TempControl._op_readTemp = IcePy.Operation('readTemp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())

    _M_home.controls.TempControl = TempControl
    del TempControl

# Start of module home.controls.Radiators
_M_home.controls.Radiators = Ice.openModule('home.controls.Radiators')
__name__ = 'home.controls.Radiators'

_M_home.controls.Radiators._t_Radiator = IcePy.defineValue('::home::controls::Radiators::Radiator', Ice.Value, -1, (), False, True, None, ())

if 'RadiatorPrx' not in _M_home.controls.Radiators.__dict__:
    _M_home.controls.Radiators.RadiatorPrx = Ice.createTempClass()
    class RadiatorPrx(_M_home.controls.TempControlPrx):

        def setTemp(self, t, context=None):
            return _M_home.controls.Radiators.Radiator._op_setTemp.invoke(self, ((t, ), context))

        def setTempAsync(self, t, context=None):
            return _M_home.controls.Radiators.Radiator._op_setTemp.invokeAsync(self, ((t, ), context))

        def begin_setTemp(self, t, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.controls.Radiators.Radiator._op_setTemp.begin(self, ((t, ), _response, _ex, _sent, context))

        def end_setTemp(self, _r):
            return _M_home.controls.Radiators.Radiator._op_setTemp.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_home.controls.Radiators.RadiatorPrx.ice_checkedCast(proxy, '::home::controls::Radiators::Radiator', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_home.controls.Radiators.RadiatorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::home::controls::Radiators::Radiator'
    _M_home.controls.Radiators._t_RadiatorPrx = IcePy.defineProxy('::home::controls::Radiators::Radiator', RadiatorPrx)

    _M_home.controls.Radiators.RadiatorPrx = RadiatorPrx
    del RadiatorPrx

    _M_home.controls.Radiators.Radiator = Ice.createTempClass()
    class Radiator(_M_home.controls.TempControl):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::home::Device', '::home::controls::Radiators::Radiator', '::home::controls::TempControl')

        def ice_id(self, current=None):
            return '::home::controls::Radiators::Radiator'

        @staticmethod
        def ice_staticId():
            return '::home::controls::Radiators::Radiator'

        def setTemp(self, t, current=None):
            raise NotImplementedError("servant method 'setTemp' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_home.controls.Radiators._t_RadiatorDisp)

        __repr__ = __str__

    _M_home.controls.Radiators._t_RadiatorDisp = IcePy.defineClass('::home::controls::Radiators::Radiator', Radiator, (), None, (_M_home.controls._t_TempControlDisp,))
    Radiator._ice_type = _M_home.controls.Radiators._t_RadiatorDisp

    Radiator._op_setTemp = IcePy.Operation('setTemp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, ())

    _M_home.controls.Radiators.Radiator = Radiator
    del Radiator

# End of module home.controls.Radiators

__name__ = 'home.controls'

# Start of module home.controls.Boilers
_M_home.controls.Boilers = Ice.openModule('home.controls.Boilers')
__name__ = 'home.controls.Boilers'

_M_home.controls.Boilers._t_Boiler = IcePy.defineValue('::home::controls::Boilers::Boiler', Ice.Value, -1, (), False, True, None, ())

if 'BoilerPrx' not in _M_home.controls.Boilers.__dict__:
    _M_home.controls.Boilers.BoilerPrx = Ice.createTempClass()
    class BoilerPrx(_M_home.controls.TempControlPrx):

        def setTemp(self, t, context=None):
            return _M_home.controls.Boilers.Boiler._op_setTemp.invoke(self, ((t, ), context))

        def setTempAsync(self, t, context=None):
            return _M_home.controls.Boilers.Boiler._op_setTemp.invokeAsync(self, ((t, ), context))

        def begin_setTemp(self, t, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.controls.Boilers.Boiler._op_setTemp.begin(self, ((t, ), _response, _ex, _sent, context))

        def end_setTemp(self, _r):
            return _M_home.controls.Boilers.Boiler._op_setTemp.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_home.controls.Boilers.BoilerPrx.ice_checkedCast(proxy, '::home::controls::Boilers::Boiler', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_home.controls.Boilers.BoilerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::home::controls::Boilers::Boiler'
    _M_home.controls.Boilers._t_BoilerPrx = IcePy.defineProxy('::home::controls::Boilers::Boiler', BoilerPrx)

    _M_home.controls.Boilers.BoilerPrx = BoilerPrx
    del BoilerPrx

    _M_home.controls.Boilers.Boiler = Ice.createTempClass()
    class Boiler(_M_home.controls.TempControl):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::home::Device', '::home::controls::Boilers::Boiler', '::home::controls::TempControl')

        def ice_id(self, current=None):
            return '::home::controls::Boilers::Boiler'

        @staticmethod
        def ice_staticId():
            return '::home::controls::Boilers::Boiler'

        def setTemp(self, t, current=None):
            raise NotImplementedError("servant method 'setTemp' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_home.controls.Boilers._t_BoilerDisp)

        __repr__ = __str__

    _M_home.controls.Boilers._t_BoilerDisp = IcePy.defineClass('::home::controls::Boilers::Boiler', Boiler, (), None, (_M_home.controls._t_TempControlDisp,))
    Boiler._ice_type = _M_home.controls.Boilers._t_BoilerDisp

    Boiler._op_setTemp = IcePy.Operation('setTemp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, ())

    _M_home.controls.Boilers.Boiler = Boiler
    del Boiler

# End of module home.controls.Boilers

__name__ = 'home.controls'

# Start of module home.controls.MeteoStations
_M_home.controls.MeteoStations = Ice.openModule('home.controls.MeteoStations')
__name__ = 'home.controls.MeteoStations'

if 'Sensor' not in _M_home.controls.MeteoStations.__dict__:
    _M_home.controls.MeteoStations.Sensor = Ice.createTempClass()
    class Sensor(object):
        def __init__(self, Name='', id=0, temp=0.0, humidity=0, pressure=0.0):
            self.Name = Name
            self.id = id
            self.temp = temp
            self.humidity = humidity
            self.pressure = pressure

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_home.controls.MeteoStations.Sensor):
                return NotImplemented
            else:
                if self.Name != other.Name:
                    return False
                if self.id != other.id:
                    return False
                if self.temp != other.temp:
                    return False
                if self.humidity != other.humidity:
                    return False
                if self.pressure != other.pressure:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_home.controls.MeteoStations._t_Sensor)

        __repr__ = __str__

    _M_home.controls.MeteoStations._t_Sensor = IcePy.defineStruct('::home::controls::MeteoStations::Sensor', Sensor, (), (
        ('Name', (), IcePy._t_string),
        ('id', (), IcePy._t_int),
        ('temp', (), IcePy._t_float),
        ('humidity', (), IcePy._t_short),
        ('pressure', (), IcePy._t_float)
    ))

    _M_home.controls.MeteoStations.Sensor = Sensor
    del Sensor

if 'LunarPhase' not in _M_home.controls.MeteoStations.__dict__:
    _M_home.controls.MeteoStations.LunarPhase = Ice.createTempClass()
    class LunarPhase(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    LunarPhase.NewMoon = LunarPhase("NewMoon", 0)
    LunarPhase.WaxingCrescent = LunarPhase("WaxingCrescent", 1)
    LunarPhase.FirstQuarter = LunarPhase("FirstQuarter", 2)
    LunarPhase.WaxingGibbous = LunarPhase("WaxingGibbous", 3)
    LunarPhase.FullMoon = LunarPhase("FullMoon", 4)
    LunarPhase.WaningGibbous = LunarPhase("WaningGibbous", 5)
    LunarPhase.LastQuarter = LunarPhase("LastQuarter", 6)
    LunarPhase.WaningCrescent = LunarPhase("WaningCrescent", 7)
    LunarPhase._enumerators = { 0:LunarPhase.NewMoon, 1:LunarPhase.WaxingCrescent, 2:LunarPhase.FirstQuarter, 3:LunarPhase.WaxingGibbous, 4:LunarPhase.FullMoon, 5:LunarPhase.WaningGibbous, 6:LunarPhase.LastQuarter, 7:LunarPhase.WaningCrescent }

    _M_home.controls.MeteoStations._t_LunarPhase = IcePy.defineEnum('::home::controls::MeteoStations::LunarPhase', LunarPhase, (), LunarPhase._enumerators)

    _M_home.controls.MeteoStations.LunarPhase = LunarPhase
    del LunarPhase

if '_t_SensorSequence' not in _M_home.controls.MeteoStations.__dict__:
    _M_home.controls.MeteoStations._t_SensorSequence = IcePy.defineSequence('::home::controls::MeteoStations::SensorSequence', (), _M_home.controls.MeteoStations._t_Sensor)

_M_home.controls.MeteoStations._t_MeteoStation = IcePy.defineValue('::home::controls::MeteoStations::MeteoStation', Ice.Value, -1, (), False, True, None, ())

if 'MeteoStationPrx' not in _M_home.controls.MeteoStations.__dict__:
    _M_home.controls.MeteoStations.MeteoStationPrx = Ice.createTempClass()
    class MeteoStationPrx(_M_home.controls.TempControlPrx):

        def readSensor(self, id, context=None):
            return _M_home.controls.MeteoStations.MeteoStation._op_readSensor.invoke(self, ((id, ), context))

        def readSensorAsync(self, id, context=None):
            return _M_home.controls.MeteoStations.MeteoStation._op_readSensor.invokeAsync(self, ((id, ), context))

        def begin_readSensor(self, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.controls.MeteoStations.MeteoStation._op_readSensor.begin(self, ((id, ), _response, _ex, _sent, context))

        def end_readSensor(self, _r):
            return _M_home.controls.MeteoStations.MeteoStation._op_readSensor.end(self, _r)

        def readSensors(self, context=None):
            return _M_home.controls.MeteoStations.MeteoStation._op_readSensors.invoke(self, ((), context))

        def readSensorsAsync(self, context=None):
            return _M_home.controls.MeteoStations.MeteoStation._op_readSensors.invokeAsync(self, ((), context))

        def begin_readSensors(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.controls.MeteoStations.MeteoStation._op_readSensors.begin(self, ((), _response, _ex, _sent, context))

        def end_readSensors(self, _r):
            return _M_home.controls.MeteoStations.MeteoStation._op_readSensors.end(self, _r)

        def readDate(self, context=None):
            return _M_home.controls.MeteoStations.MeteoStation._op_readDate.invoke(self, ((), context))

        def readDateAsync(self, context=None):
            return _M_home.controls.MeteoStations.MeteoStation._op_readDate.invokeAsync(self, ((), context))

        def begin_readDate(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.controls.MeteoStations.MeteoStation._op_readDate.begin(self, ((), _response, _ex, _sent, context))

        def end_readDate(self, _r):
            return _M_home.controls.MeteoStations.MeteoStation._op_readDate.end(self, _r)

        def readLunarPhase(self, context=None):
            return _M_home.controls.MeteoStations.MeteoStation._op_readLunarPhase.invoke(self, ((), context))

        def readLunarPhaseAsync(self, context=None):
            return _M_home.controls.MeteoStations.MeteoStation._op_readLunarPhase.invokeAsync(self, ((), context))

        def begin_readLunarPhase(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.controls.MeteoStations.MeteoStation._op_readLunarPhase.begin(self, ((), _response, _ex, _sent, context))

        def end_readLunarPhase(self, _r):
            return _M_home.controls.MeteoStations.MeteoStation._op_readLunarPhase.end(self, _r)

        def readHumidity(self, context=None):
            return _M_home.controls.MeteoStations.MeteoStation._op_readHumidity.invoke(self, ((), context))

        def readHumidityAsync(self, context=None):
            return _M_home.controls.MeteoStations.MeteoStation._op_readHumidity.invokeAsync(self, ((), context))

        def begin_readHumidity(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.controls.MeteoStations.MeteoStation._op_readHumidity.begin(self, ((), _response, _ex, _sent, context))

        def end_readHumidity(self, _r):
            return _M_home.controls.MeteoStations.MeteoStation._op_readHumidity.end(self, _r)

        def readPressure(self, context=None):
            return _M_home.controls.MeteoStations.MeteoStation._op_readPressure.invoke(self, ((), context))

        def readPressureAsync(self, context=None):
            return _M_home.controls.MeteoStations.MeteoStation._op_readPressure.invokeAsync(self, ((), context))

        def begin_readPressure(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.controls.MeteoStations.MeteoStation._op_readPressure.begin(self, ((), _response, _ex, _sent, context))

        def end_readPressure(self, _r):
            return _M_home.controls.MeteoStations.MeteoStation._op_readPressure.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_home.controls.MeteoStations.MeteoStationPrx.ice_checkedCast(proxy, '::home::controls::MeteoStations::MeteoStation', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_home.controls.MeteoStations.MeteoStationPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::home::controls::MeteoStations::MeteoStation'
    _M_home.controls.MeteoStations._t_MeteoStationPrx = IcePy.defineProxy('::home::controls::MeteoStations::MeteoStation', MeteoStationPrx)

    _M_home.controls.MeteoStations.MeteoStationPrx = MeteoStationPrx
    del MeteoStationPrx

    _M_home.controls.MeteoStations.MeteoStation = Ice.createTempClass()
    class MeteoStation(_M_home.controls.TempControl):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::home::Device', '::home::controls::MeteoStations::MeteoStation', '::home::controls::TempControl')

        def ice_id(self, current=None):
            return '::home::controls::MeteoStations::MeteoStation'

        @staticmethod
        def ice_staticId():
            return '::home::controls::MeteoStations::MeteoStation'

        def readSensor(self, id, current=None):
            raise NotImplementedError("servant method 'readSensor' not implemented")

        def readSensors(self, current=None):
            raise NotImplementedError("servant method 'readSensors' not implemented")

        def readDate(self, current=None):
            raise NotImplementedError("servant method 'readDate' not implemented")

        def readLunarPhase(self, current=None):
            raise NotImplementedError("servant method 'readLunarPhase' not implemented")

        def readHumidity(self, current=None):
            raise NotImplementedError("servant method 'readHumidity' not implemented")

        def readPressure(self, current=None):
            raise NotImplementedError("servant method 'readPressure' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_home.controls.MeteoStations._t_MeteoStationDisp)

        __repr__ = __str__

    _M_home.controls.MeteoStations._t_MeteoStationDisp = IcePy.defineClass('::home::controls::MeteoStations::MeteoStation', MeteoStation, (), None, (_M_home.controls._t_TempControlDisp,))
    MeteoStation._ice_type = _M_home.controls.MeteoStations._t_MeteoStationDisp

    MeteoStation._op_readSensor = IcePy.Operation('readSensor', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), _M_home.controls.MeteoStations._t_Sensor, False, 0), ())
    MeteoStation._op_readSensors = IcePy.Operation('readSensors', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_home.controls.MeteoStations._t_SensorSequence, False, 0), ())
    MeteoStation._op_readDate = IcePy.Operation('readDate', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_home._t_DateTime, False, 0), ())
    MeteoStation._op_readLunarPhase = IcePy.Operation('readLunarPhase', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_home.controls.MeteoStations._t_LunarPhase, False, 0), ())
    MeteoStation._op_readHumidity = IcePy.Operation('readHumidity', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())
    MeteoStation._op_readPressure = IcePy.Operation('readPressure', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())

    _M_home.controls.MeteoStations.MeteoStation = MeteoStation
    del MeteoStation

# End of module home.controls.MeteoStations

__name__ = 'home.controls'

# End of module home.controls

__name__ = 'home'

# Start of module home.agdDevices
_M_home.agdDevices = Ice.openModule('home.agdDevices')
__name__ = 'home.agdDevices'

_M_home.agdDevices._t_AGD = IcePy.defineValue('::home::agdDevices::AGD', Ice.Value, -1, (), False, True, None, ())

if 'AGDPrx' not in _M_home.agdDevices.__dict__:
    _M_home.agdDevices.AGDPrx = Ice.createTempClass()
    class AGDPrx(_M_home.DevicePrx):

        def isOn(self, context=None):
            return _M_home.agdDevices.AGD._op_isOn.invoke(self, ((), context))

        def isOnAsync(self, context=None):
            return _M_home.agdDevices.AGD._op_isOn.invokeAsync(self, ((), context))

        def begin_isOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.agdDevices.AGD._op_isOn.begin(self, ((), _response, _ex, _sent, context))

        def end_isOn(self, _r):
            return _M_home.agdDevices.AGD._op_isOn.end(self, _r)

        def startDevice(self, context=None):
            return _M_home.agdDevices.AGD._op_startDevice.invoke(self, ((), context))

        def startDeviceAsync(self, context=None):
            return _M_home.agdDevices.AGD._op_startDevice.invokeAsync(self, ((), context))

        def begin_startDevice(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.agdDevices.AGD._op_startDevice.begin(self, ((), _response, _ex, _sent, context))

        def end_startDevice(self, _r):
            return _M_home.agdDevices.AGD._op_startDevice.end(self, _r)

        def stopDevice(self, context=None):
            return _M_home.agdDevices.AGD._op_stopDevice.invoke(self, ((), context))

        def stopDeviceAsync(self, context=None):
            return _M_home.agdDevices.AGD._op_stopDevice.invokeAsync(self, ((), context))

        def begin_stopDevice(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.agdDevices.AGD._op_stopDevice.begin(self, ((), _response, _ex, _sent, context))

        def end_stopDevice(self, _r):
            return _M_home.agdDevices.AGD._op_stopDevice.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_home.agdDevices.AGDPrx.ice_checkedCast(proxy, '::home::agdDevices::AGD', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_home.agdDevices.AGDPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::home::agdDevices::AGD'
    _M_home.agdDevices._t_AGDPrx = IcePy.defineProxy('::home::agdDevices::AGD', AGDPrx)

    _M_home.agdDevices.AGDPrx = AGDPrx
    del AGDPrx

    _M_home.agdDevices.AGD = Ice.createTempClass()
    class AGD(_M_home.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::home::Device', '::home::agdDevices::AGD')

        def ice_id(self, current=None):
            return '::home::agdDevices::AGD'

        @staticmethod
        def ice_staticId():
            return '::home::agdDevices::AGD'

        def isOn(self, current=None):
            raise NotImplementedError("servant method 'isOn' not implemented")

        def startDevice(self, current=None):
            raise NotImplementedError("servant method 'startDevice' not implemented")

        def stopDevice(self, current=None):
            raise NotImplementedError("servant method 'stopDevice' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_home.agdDevices._t_AGDDisp)

        __repr__ = __str__

    _M_home.agdDevices._t_AGDDisp = IcePy.defineClass('::home::agdDevices::AGD', AGD, (), None, (_M_home._t_DeviceDisp,))
    AGD._ice_type = _M_home.agdDevices._t_AGDDisp

    AGD._op_isOn = IcePy.Operation('isOn', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    AGD._op_startDevice = IcePy.Operation('startDevice', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    AGD._op_stopDevice = IcePy.Operation('stopDevice', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_home.agdDevices.AGD = AGD
    del AGD

# Start of module home.agdDevices.FridgeFreezers
_M_home.agdDevices.FridgeFreezers = Ice.openModule('home.agdDevices.FridgeFreezers')
__name__ = 'home.agdDevices.FridgeFreezers'

_M_home.agdDevices.FridgeFreezers._t_Fridge = IcePy.defineValue('::home::agdDevices::FridgeFreezers::Fridge', Ice.Value, -1, (), False, True, None, ())

if 'FridgePrx' not in _M_home.agdDevices.FridgeFreezers.__dict__:
    _M_home.agdDevices.FridgeFreezers.FridgePrx = Ice.createTempClass()
    class FridgePrx(_M_home.agdDevices.AGDPrx):

        def setFridgeTemp(self, t, context=None):
            return _M_home.agdDevices.FridgeFreezers.Fridge._op_setFridgeTemp.invoke(self, ((t, ), context))

        def setFridgeTempAsync(self, t, context=None):
            return _M_home.agdDevices.FridgeFreezers.Fridge._op_setFridgeTemp.invokeAsync(self, ((t, ), context))

        def begin_setFridgeTemp(self, t, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.agdDevices.FridgeFreezers.Fridge._op_setFridgeTemp.begin(self, ((t, ), _response, _ex, _sent, context))

        def end_setFridgeTemp(self, _r):
            return _M_home.agdDevices.FridgeFreezers.Fridge._op_setFridgeTemp.end(self, _r)

        def getFridgeTemp(self, context=None):
            return _M_home.agdDevices.FridgeFreezers.Fridge._op_getFridgeTemp.invoke(self, ((), context))

        def getFridgeTempAsync(self, context=None):
            return _M_home.agdDevices.FridgeFreezers.Fridge._op_getFridgeTemp.invokeAsync(self, ((), context))

        def begin_getFridgeTemp(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.agdDevices.FridgeFreezers.Fridge._op_getFridgeTemp.begin(self, ((), _response, _ex, _sent, context))

        def end_getFridgeTemp(self, _r):
            return _M_home.agdDevices.FridgeFreezers.Fridge._op_getFridgeTemp.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_home.agdDevices.FridgeFreezers.FridgePrx.ice_checkedCast(proxy, '::home::agdDevices::FridgeFreezers::Fridge', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_home.agdDevices.FridgeFreezers.FridgePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::home::agdDevices::FridgeFreezers::Fridge'
    _M_home.agdDevices.FridgeFreezers._t_FridgePrx = IcePy.defineProxy('::home::agdDevices::FridgeFreezers::Fridge', FridgePrx)

    _M_home.agdDevices.FridgeFreezers.FridgePrx = FridgePrx
    del FridgePrx

    _M_home.agdDevices.FridgeFreezers.Fridge = Ice.createTempClass()
    class Fridge(_M_home.agdDevices.AGD):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::home::Device', '::home::agdDevices::AGD', '::home::agdDevices::FridgeFreezers::Fridge')

        def ice_id(self, current=None):
            return '::home::agdDevices::FridgeFreezers::Fridge'

        @staticmethod
        def ice_staticId():
            return '::home::agdDevices::FridgeFreezers::Fridge'

        def setFridgeTemp(self, t, current=None):
            raise NotImplementedError("servant method 'setFridgeTemp' not implemented")

        def getFridgeTemp(self, current=None):
            raise NotImplementedError("servant method 'getFridgeTemp' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_home.agdDevices.FridgeFreezers._t_FridgeDisp)

        __repr__ = __str__

    _M_home.agdDevices.FridgeFreezers._t_FridgeDisp = IcePy.defineClass('::home::agdDevices::FridgeFreezers::Fridge', Fridge, (), None, (_M_home.agdDevices._t_AGDDisp,))
    Fridge._ice_type = _M_home.agdDevices.FridgeFreezers._t_FridgeDisp

    Fridge._op_setFridgeTemp = IcePy.Operation('setFridgeTemp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, ())
    Fridge._op_getFridgeTemp = IcePy.Operation('getFridgeTemp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())

    _M_home.agdDevices.FridgeFreezers.Fridge = Fridge
    del Fridge

_M_home.agdDevices.FridgeFreezers._t_Freezer = IcePy.defineValue('::home::agdDevices::FridgeFreezers::Freezer', Ice.Value, -1, (), False, True, None, ())

if 'FreezerPrx' not in _M_home.agdDevices.FridgeFreezers.__dict__:
    _M_home.agdDevices.FridgeFreezers.FreezerPrx = Ice.createTempClass()
    class FreezerPrx(_M_home.agdDevices.AGDPrx):

        def setFreezerTemp(self, t, context=None):
            return _M_home.agdDevices.FridgeFreezers.Freezer._op_setFreezerTemp.invoke(self, ((t, ), context))

        def setFreezerTempAsync(self, t, context=None):
            return _M_home.agdDevices.FridgeFreezers.Freezer._op_setFreezerTemp.invokeAsync(self, ((t, ), context))

        def begin_setFreezerTemp(self, t, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.agdDevices.FridgeFreezers.Freezer._op_setFreezerTemp.begin(self, ((t, ), _response, _ex, _sent, context))

        def end_setFreezerTemp(self, _r):
            return _M_home.agdDevices.FridgeFreezers.Freezer._op_setFreezerTemp.end(self, _r)

        def getFreezerTemp(self, context=None):
            return _M_home.agdDevices.FridgeFreezers.Freezer._op_getFreezerTemp.invoke(self, ((), context))

        def getFreezerTempAsync(self, context=None):
            return _M_home.agdDevices.FridgeFreezers.Freezer._op_getFreezerTemp.invokeAsync(self, ((), context))

        def begin_getFreezerTemp(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.agdDevices.FridgeFreezers.Freezer._op_getFreezerTemp.begin(self, ((), _response, _ex, _sent, context))

        def end_getFreezerTemp(self, _r):
            return _M_home.agdDevices.FridgeFreezers.Freezer._op_getFreezerTemp.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_home.agdDevices.FridgeFreezers.FreezerPrx.ice_checkedCast(proxy, '::home::agdDevices::FridgeFreezers::Freezer', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_home.agdDevices.FridgeFreezers.FreezerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::home::agdDevices::FridgeFreezers::Freezer'
    _M_home.agdDevices.FridgeFreezers._t_FreezerPrx = IcePy.defineProxy('::home::agdDevices::FridgeFreezers::Freezer', FreezerPrx)

    _M_home.agdDevices.FridgeFreezers.FreezerPrx = FreezerPrx
    del FreezerPrx

    _M_home.agdDevices.FridgeFreezers.Freezer = Ice.createTempClass()
    class Freezer(_M_home.agdDevices.AGD):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::home::Device', '::home::agdDevices::AGD', '::home::agdDevices::FridgeFreezers::Freezer')

        def ice_id(self, current=None):
            return '::home::agdDevices::FridgeFreezers::Freezer'

        @staticmethod
        def ice_staticId():
            return '::home::agdDevices::FridgeFreezers::Freezer'

        def setFreezerTemp(self, t, current=None):
            raise NotImplementedError("servant method 'setFreezerTemp' not implemented")

        def getFreezerTemp(self, current=None):
            raise NotImplementedError("servant method 'getFreezerTemp' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_home.agdDevices.FridgeFreezers._t_FreezerDisp)

        __repr__ = __str__

    _M_home.agdDevices.FridgeFreezers._t_FreezerDisp = IcePy.defineClass('::home::agdDevices::FridgeFreezers::Freezer', Freezer, (), None, (_M_home.agdDevices._t_AGDDisp,))
    Freezer._ice_type = _M_home.agdDevices.FridgeFreezers._t_FreezerDisp

    Freezer._op_setFreezerTemp = IcePy.Operation('setFreezerTemp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, ())
    Freezer._op_getFreezerTemp = IcePy.Operation('getFreezerTemp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())

    _M_home.agdDevices.FridgeFreezers.Freezer = Freezer
    del Freezer

_M_home.agdDevices.FridgeFreezers._t_FridgeFreezer = IcePy.defineValue('::home::agdDevices::FridgeFreezers::FridgeFreezer', Ice.Value, -1, (), False, True, None, ())

if 'FridgeFreezerPrx' not in _M_home.agdDevices.FridgeFreezers.__dict__:
    _M_home.agdDevices.FridgeFreezers.FridgeFreezerPrx = Ice.createTempClass()
    class FridgeFreezerPrx(_M_home.agdDevices.FridgeFreezers.FridgePrx, _M_home.agdDevices.FridgeFreezers.FreezerPrx):

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_home.agdDevices.FridgeFreezers.FridgeFreezerPrx.ice_checkedCast(proxy, '::home::agdDevices::FridgeFreezers::FridgeFreezer', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_home.agdDevices.FridgeFreezers.FridgeFreezerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::home::agdDevices::FridgeFreezers::FridgeFreezer'
    _M_home.agdDevices.FridgeFreezers._t_FridgeFreezerPrx = IcePy.defineProxy('::home::agdDevices::FridgeFreezers::FridgeFreezer', FridgeFreezerPrx)

    _M_home.agdDevices.FridgeFreezers.FridgeFreezerPrx = FridgeFreezerPrx
    del FridgeFreezerPrx

    _M_home.agdDevices.FridgeFreezers.FridgeFreezer = Ice.createTempClass()
    class FridgeFreezer(_M_home.agdDevices.FridgeFreezers.Fridge, _M_home.agdDevices.FridgeFreezers.Freezer):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::home::Device', '::home::agdDevices::AGD', '::home::agdDevices::FridgeFreezers::Freezer', '::home::agdDevices::FridgeFreezers::Fridge', '::home::agdDevices::FridgeFreezers::FridgeFreezer')

        def ice_id(self, current=None):
            return '::home::agdDevices::FridgeFreezers::FridgeFreezer'

        @staticmethod
        def ice_staticId():
            return '::home::agdDevices::FridgeFreezers::FridgeFreezer'

        def __str__(self):
            return IcePy.stringify(self, _M_home.agdDevices.FridgeFreezers._t_FridgeFreezerDisp)

        __repr__ = __str__

    _M_home.agdDevices.FridgeFreezers._t_FridgeFreezerDisp = IcePy.defineClass('::home::agdDevices::FridgeFreezers::FridgeFreezer', FridgeFreezer, (), None, (_M_home.agdDevices.FridgeFreezers._t_FridgeDisp, _M_home.agdDevices.FridgeFreezers._t_FreezerDisp))
    FridgeFreezer._ice_type = _M_home.agdDevices.FridgeFreezers._t_FridgeFreezerDisp

    _M_home.agdDevices.FridgeFreezers.FridgeFreezer = FridgeFreezer
    del FridgeFreezer

# End of module home.agdDevices.FridgeFreezers

__name__ = 'home.agdDevices'

# Start of module home.agdDevices.Dishwashers
_M_home.agdDevices.Dishwashers = Ice.openModule('home.agdDevices.Dishwashers')
__name__ = 'home.agdDevices.Dishwashers'

if 'WashingProgram' not in _M_home.agdDevices.Dishwashers.__dict__:
    _M_home.agdDevices.Dishwashers.WashingProgram = Ice.createTempClass()
    class WashingProgram(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    WashingProgram.Off = WashingProgram("Off", 0)
    WashingProgram.EnergySave = WashingProgram("EnergySave", 1)
    WashingProgram.Normal = WashingProgram("Normal", 2)
    WashingProgram.Automatic = WashingProgram("Automatic", 3)
    WashingProgram.Fast = WashingProgram("Fast", 4)
    WashingProgram._enumerators = { 0:WashingProgram.Off, 1:WashingProgram.EnergySave, 2:WashingProgram.Normal, 3:WashingProgram.Automatic, 4:WashingProgram.Fast }

    _M_home.agdDevices.Dishwashers._t_WashingProgram = IcePy.defineEnum('::home::agdDevices::Dishwashers::WashingProgram', WashingProgram, (), WashingProgram._enumerators)

    _M_home.agdDevices.Dishwashers.WashingProgram = WashingProgram
    del WashingProgram

if 'Program' not in _M_home.agdDevices.Dishwashers.__dict__:
    _M_home.agdDevices.Dishwashers.Program = Ice.createTempClass()
    class Program(object):
        def __init__(self, time=Ice._struct_marker, wp=_M_home.agdDevices.Dishwashers.WashingProgram.Off, duration=0.0):
            if time is Ice._struct_marker:
                self.time = _M_home.DateTime()
            else:
                self.time = time
            self.wp = wp
            self.duration = duration

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_home.agdDevices.Dishwashers.Program):
                return NotImplemented
            else:
                if self.time != other.time:
                    return False
                if self.wp != other.wp:
                    return False
                if self.duration != other.duration:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_home.agdDevices.Dishwashers._t_Program)

        __repr__ = __str__

    _M_home.agdDevices.Dishwashers._t_Program = IcePy.defineStruct('::home::agdDevices::Dishwashers::Program', Program, (), (
        ('time', (), _M_home._t_DateTime),
        ('wp', (), _M_home.agdDevices.Dishwashers._t_WashingProgram),
        ('duration', (), IcePy._t_float)
    ))

    _M_home.agdDevices.Dishwashers.Program = Program
    del Program

_M_home.agdDevices.Dishwashers._t_Dishwasher = IcePy.defineValue('::home::agdDevices::Dishwashers::Dishwasher', Ice.Value, -1, (), False, True, None, ())

if 'DishwasherPrx' not in _M_home.agdDevices.Dishwashers.__dict__:
    _M_home.agdDevices.Dishwashers.DishwasherPrx = Ice.createTempClass()
    class DishwasherPrx(_M_home.agdDevices.AGDPrx):

        def setWashingProgram(self, p, context=None):
            return _M_home.agdDevices.Dishwashers.Dishwasher._op_setWashingProgram.invoke(self, ((p, ), context))

        def setWashingProgramAsync(self, p, context=None):
            return _M_home.agdDevices.Dishwashers.Dishwasher._op_setWashingProgram.invokeAsync(self, ((p, ), context))

        def begin_setWashingProgram(self, p, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.agdDevices.Dishwashers.Dishwasher._op_setWashingProgram.begin(self, ((p, ), _response, _ex, _sent, context))

        def end_setWashingProgram(self, _r):
            return _M_home.agdDevices.Dishwashers.Dishwasher._op_setWashingProgram.end(self, _r)

        def getWashingProgram(self, context=None):
            return _M_home.agdDevices.Dishwashers.Dishwasher._op_getWashingProgram.invoke(self, ((), context))

        def getWashingProgramAsync(self, context=None):
            return _M_home.agdDevices.Dishwashers.Dishwasher._op_getWashingProgram.invokeAsync(self, ((), context))

        def begin_getWashingProgram(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.agdDevices.Dishwashers.Dishwasher._op_getWashingProgram.begin(self, ((), _response, _ex, _sent, context))

        def end_getWashingProgram(self, _r):
            return _M_home.agdDevices.Dishwashers.Dishwasher._op_getWashingProgram.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_home.agdDevices.Dishwashers.DishwasherPrx.ice_checkedCast(proxy, '::home::agdDevices::Dishwashers::Dishwasher', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_home.agdDevices.Dishwashers.DishwasherPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::home::agdDevices::Dishwashers::Dishwasher'
    _M_home.agdDevices.Dishwashers._t_DishwasherPrx = IcePy.defineProxy('::home::agdDevices::Dishwashers::Dishwasher', DishwasherPrx)

    _M_home.agdDevices.Dishwashers.DishwasherPrx = DishwasherPrx
    del DishwasherPrx

    _M_home.agdDevices.Dishwashers.Dishwasher = Ice.createTempClass()
    class Dishwasher(_M_home.agdDevices.AGD):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::home::Device', '::home::agdDevices::AGD', '::home::agdDevices::Dishwashers::Dishwasher')

        def ice_id(self, current=None):
            return '::home::agdDevices::Dishwashers::Dishwasher'

        @staticmethod
        def ice_staticId():
            return '::home::agdDevices::Dishwashers::Dishwasher'

        def setWashingProgram(self, p, current=None):
            raise NotImplementedError("servant method 'setWashingProgram' not implemented")

        def getWashingProgram(self, current=None):
            raise NotImplementedError("servant method 'getWashingProgram' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_home.agdDevices.Dishwashers._t_DishwasherDisp)

        __repr__ = __str__

    _M_home.agdDevices.Dishwashers._t_DishwasherDisp = IcePy.defineClass('::home::agdDevices::Dishwashers::Dishwasher', Dishwasher, (), None, (_M_home.agdDevices._t_AGDDisp,))
    Dishwasher._ice_type = _M_home.agdDevices.Dishwashers._t_DishwasherDisp

    Dishwasher._op_setWashingProgram = IcePy.Operation('setWashingProgram', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_home.agdDevices.Dishwashers._t_Program, False, 0),), (), None, ())
    Dishwasher._op_getWashingProgram = IcePy.Operation('getWashingProgram', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_home.agdDevices.Dishwashers._t_Program, False, 0), ())

    _M_home.agdDevices.Dishwashers.Dishwasher = Dishwasher
    del Dishwasher

# End of module home.agdDevices.Dishwashers

__name__ = 'home.agdDevices'

# Start of module home.agdDevices.WashingMachines
_M_home.agdDevices.WashingMachines = Ice.openModule('home.agdDevices.WashingMachines')
__name__ = 'home.agdDevices.WashingMachines'

if 'WashingProgram' not in _M_home.agdDevices.WashingMachines.__dict__:
    _M_home.agdDevices.WashingMachines.WashingProgram = Ice.createTempClass()
    class WashingProgram(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    WashingProgram.Off = WashingProgram("Off", 0)
    WashingProgram.Cotton = WashingProgram("Cotton", 1)
    WashingProgram.Wool = WashingProgram("Wool", 2)
    WashingProgram.AntiCrease = WashingProgram("AntiCrease", 3)
    WashingProgram.ExtraRinse = WashingProgram("ExtraRinse", 4)
    WashingProgram.Quick = WashingProgram("Quick", 5)
    WashingProgram._enumerators = { 0:WashingProgram.Off, 1:WashingProgram.Cotton, 2:WashingProgram.Wool, 3:WashingProgram.AntiCrease, 4:WashingProgram.ExtraRinse, 5:WashingProgram.Quick }

    _M_home.agdDevices.WashingMachines._t_WashingProgram = IcePy.defineEnum('::home::agdDevices::WashingMachines::WashingProgram', WashingProgram, (), WashingProgram._enumerators)

    _M_home.agdDevices.WashingMachines.WashingProgram = WashingProgram
    del WashingProgram

if 'Program' not in _M_home.agdDevices.WashingMachines.__dict__:
    _M_home.agdDevices.WashingMachines.Program = Ice.createTempClass()
    class Program(object):
        def __init__(self, time=Ice._struct_marker, wp=_M_home.agdDevices.WashingMachines.WashingProgram.Off, duration=0.0):
            if time is Ice._struct_marker:
                self.time = _M_home.DateTime()
            else:
                self.time = time
            self.wp = wp
            self.duration = duration

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_home.agdDevices.WashingMachines.Program):
                return NotImplemented
            else:
                if self.time != other.time:
                    return False
                if self.wp != other.wp:
                    return False
                if self.duration != other.duration:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_home.agdDevices.WashingMachines._t_Program)

        __repr__ = __str__

    _M_home.agdDevices.WashingMachines._t_Program = IcePy.defineStruct('::home::agdDevices::WashingMachines::Program', Program, (), (
        ('time', (), _M_home._t_DateTime),
        ('wp', (), _M_home.agdDevices.WashingMachines._t_WashingProgram),
        ('duration', (), IcePy._t_float)
    ))

    _M_home.agdDevices.WashingMachines.Program = Program
    del Program

_M_home.agdDevices.WashingMachines._t_WashingMachine = IcePy.defineValue('::home::agdDevices::WashingMachines::WashingMachine', Ice.Value, -1, (), False, True, None, ())

if 'WashingMachinePrx' not in _M_home.agdDevices.WashingMachines.__dict__:
    _M_home.agdDevices.WashingMachines.WashingMachinePrx = Ice.createTempClass()
    class WashingMachinePrx(_M_home.agdDevices.AGDPrx):

        def setWashingProgram(self, p, context=None):
            return _M_home.agdDevices.WashingMachines.WashingMachine._op_setWashingProgram.invoke(self, ((p, ), context))

        def setWashingProgramAsync(self, p, context=None):
            return _M_home.agdDevices.WashingMachines.WashingMachine._op_setWashingProgram.invokeAsync(self, ((p, ), context))

        def begin_setWashingProgram(self, p, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.agdDevices.WashingMachines.WashingMachine._op_setWashingProgram.begin(self, ((p, ), _response, _ex, _sent, context))

        def end_setWashingProgram(self, _r):
            return _M_home.agdDevices.WashingMachines.WashingMachine._op_setWashingProgram.end(self, _r)

        def getWashingProgram(self, context=None):
            return _M_home.agdDevices.WashingMachines.WashingMachine._op_getWashingProgram.invoke(self, ((), context))

        def getWashingProgramAsync(self, context=None):
            return _M_home.agdDevices.WashingMachines.WashingMachine._op_getWashingProgram.invokeAsync(self, ((), context))

        def begin_getWashingProgram(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.agdDevices.WashingMachines.WashingMachine._op_getWashingProgram.begin(self, ((), _response, _ex, _sent, context))

        def end_getWashingProgram(self, _r):
            return _M_home.agdDevices.WashingMachines.WashingMachine._op_getWashingProgram.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_home.agdDevices.WashingMachines.WashingMachinePrx.ice_checkedCast(proxy, '::home::agdDevices::WashingMachines::WashingMachine', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_home.agdDevices.WashingMachines.WashingMachinePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::home::agdDevices::WashingMachines::WashingMachine'
    _M_home.agdDevices.WashingMachines._t_WashingMachinePrx = IcePy.defineProxy('::home::agdDevices::WashingMachines::WashingMachine', WashingMachinePrx)

    _M_home.agdDevices.WashingMachines.WashingMachinePrx = WashingMachinePrx
    del WashingMachinePrx

    _M_home.agdDevices.WashingMachines.WashingMachine = Ice.createTempClass()
    class WashingMachine(_M_home.agdDevices.AGD):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::home::Device', '::home::agdDevices::AGD', '::home::agdDevices::WashingMachines::WashingMachine')

        def ice_id(self, current=None):
            return '::home::agdDevices::WashingMachines::WashingMachine'

        @staticmethod
        def ice_staticId():
            return '::home::agdDevices::WashingMachines::WashingMachine'

        def setWashingProgram(self, p, current=None):
            raise NotImplementedError("servant method 'setWashingProgram' not implemented")

        def getWashingProgram(self, current=None):
            raise NotImplementedError("servant method 'getWashingProgram' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_home.agdDevices.WashingMachines._t_WashingMachineDisp)

        __repr__ = __str__

    _M_home.agdDevices.WashingMachines._t_WashingMachineDisp = IcePy.defineClass('::home::agdDevices::WashingMachines::WashingMachine', WashingMachine, (), None, (_M_home.agdDevices._t_AGDDisp,))
    WashingMachine._ice_type = _M_home.agdDevices.WashingMachines._t_WashingMachineDisp

    WashingMachine._op_setWashingProgram = IcePy.Operation('setWashingProgram', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_home.agdDevices.WashingMachines._t_Program, False, 0),), (), None, ())
    WashingMachine._op_getWashingProgram = IcePy.Operation('getWashingProgram', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_home.agdDevices.WashingMachines._t_Program, False, 0), ())

    _M_home.agdDevices.WashingMachines.WashingMachine = WashingMachine
    del WashingMachine

# End of module home.agdDevices.WashingMachines

__name__ = 'home.agdDevices'

# Start of module home.agdDevices.Ovens
_M_home.agdDevices.Ovens = Ice.openModule('home.agdDevices.Ovens')
__name__ = 'home.agdDevices.Ovens'

if 'Settings' not in _M_home.agdDevices.Ovens.__dict__:
    _M_home.agdDevices.Ovens.Settings = Ice.createTempClass()
    class Settings(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    Settings.Off = Settings("Off", 0)
    Settings.Fan = Settings("Fan", 1)
    Settings.Grill = Settings("Grill", 2)
    Settings.Bottom = Settings("Bottom", 3)
    Settings.TopBottom = Settings("TopBottom", 4)
    Settings.Defrosting = Settings("Defrosting", 5)
    Settings._enumerators = { 0:Settings.Off, 1:Settings.Fan, 2:Settings.Grill, 3:Settings.Bottom, 4:Settings.TopBottom, 5:Settings.Defrosting }

    _M_home.agdDevices.Ovens._t_Settings = IcePy.defineEnum('::home::agdDevices::Ovens::Settings', Settings, (), Settings._enumerators)

    _M_home.agdDevices.Ovens.Settings = Settings
    del Settings

if 'Program' not in _M_home.agdDevices.Ovens.__dict__:
    _M_home.agdDevices.Ovens.Program = Ice.createTempClass()
    class Program(object):
        def __init__(self, s=_M_home.agdDevices.Ovens.Settings.Off, duration=0.0, temp=0):
            self.s = s
            self.duration = duration
            self.temp = temp

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_home.agdDevices.Ovens.Program):
                return NotImplemented
            else:
                if self.s != other.s:
                    return False
                if self.duration != other.duration:
                    return False
                if self.temp != other.temp:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_home.agdDevices.Ovens._t_Program)

        __repr__ = __str__

    _M_home.agdDevices.Ovens._t_Program = IcePy.defineStruct('::home::agdDevices::Ovens::Program', Program, (), (
        ('s', (), _M_home.agdDevices.Ovens._t_Settings),
        ('duration', (), IcePy._t_float),
        ('temp', (), IcePy._t_int)
    ))

    _M_home.agdDevices.Ovens.Program = Program
    del Program

_M_home.agdDevices.Ovens._t_Oven = IcePy.defineValue('::home::agdDevices::Ovens::Oven', Ice.Value, -1, (), False, True, None, ())

if 'OvenPrx' not in _M_home.agdDevices.Ovens.__dict__:
    _M_home.agdDevices.Ovens.OvenPrx = Ice.createTempClass()
    class OvenPrx(_M_home.agdDevices.AGDPrx):

        def setProgram(self, p, context=None):
            return _M_home.agdDevices.Ovens.Oven._op_setProgram.invoke(self, ((p, ), context))

        def setProgramAsync(self, p, context=None):
            return _M_home.agdDevices.Ovens.Oven._op_setProgram.invokeAsync(self, ((p, ), context))

        def begin_setProgram(self, p, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.agdDevices.Ovens.Oven._op_setProgram.begin(self, ((p, ), _response, _ex, _sent, context))

        def end_setProgram(self, _r):
            return _M_home.agdDevices.Ovens.Oven._op_setProgram.end(self, _r)

        def getProgram(self, context=None):
            return _M_home.agdDevices.Ovens.Oven._op_getProgram.invoke(self, ((), context))

        def getProgramAsync(self, context=None):
            return _M_home.agdDevices.Ovens.Oven._op_getProgram.invokeAsync(self, ((), context))

        def begin_getProgram(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.agdDevices.Ovens.Oven._op_getProgram.begin(self, ((), _response, _ex, _sent, context))

        def end_getProgram(self, _r):
            return _M_home.agdDevices.Ovens.Oven._op_getProgram.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_home.agdDevices.Ovens.OvenPrx.ice_checkedCast(proxy, '::home::agdDevices::Ovens::Oven', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_home.agdDevices.Ovens.OvenPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::home::agdDevices::Ovens::Oven'
    _M_home.agdDevices.Ovens._t_OvenPrx = IcePy.defineProxy('::home::agdDevices::Ovens::Oven', OvenPrx)

    _M_home.agdDevices.Ovens.OvenPrx = OvenPrx
    del OvenPrx

    _M_home.agdDevices.Ovens.Oven = Ice.createTempClass()
    class Oven(_M_home.agdDevices.AGD):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::home::Device', '::home::agdDevices::AGD', '::home::agdDevices::Ovens::Oven')

        def ice_id(self, current=None):
            return '::home::agdDevices::Ovens::Oven'

        @staticmethod
        def ice_staticId():
            return '::home::agdDevices::Ovens::Oven'

        def setProgram(self, p, current=None):
            raise NotImplementedError("servant method 'setProgram' not implemented")

        def getProgram(self, current=None):
            raise NotImplementedError("servant method 'getProgram' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_home.agdDevices.Ovens._t_OvenDisp)

        __repr__ = __str__

    _M_home.agdDevices.Ovens._t_OvenDisp = IcePy.defineClass('::home::agdDevices::Ovens::Oven', Oven, (), None, (_M_home.agdDevices._t_AGDDisp,))
    Oven._ice_type = _M_home.agdDevices.Ovens._t_OvenDisp

    Oven._op_setProgram = IcePy.Operation('setProgram', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_home.agdDevices.Ovens._t_Program, False, 0),), (), None, ())
    Oven._op_getProgram = IcePy.Operation('getProgram', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_home.agdDevices.Ovens._t_Program, False, 0), ())

    _M_home.agdDevices.Ovens.Oven = Oven
    del Oven

# End of module home.agdDevices.Ovens

__name__ = 'home.agdDevices'

# End of module home.agdDevices

__name__ = 'home'

# Start of module home.monitoring
_M_home.monitoring = Ice.openModule('home.monitoring')
__name__ = 'home.monitoring'

if 'View' not in _M_home.monitoring.__dict__:
    _M_home.monitoring.View = Ice.createTempClass()
    class View(object):
        def __init__(self, width=0, height=0, t=Ice._struct_marker, v=''):
            self.width = width
            self.height = height
            if t is Ice._struct_marker:
                self.t = _M_home.DateTime()
            else:
                self.t = t
            self.v = v

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.width)
            _h = 5 * _h + Ice.getHash(self.height)
            _h = 5 * _h + Ice.getHash(self.t)
            _h = 5 * _h + Ice.getHash(self.v)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_home.monitoring.View):
                return NotImplemented
            else:
                if self.width is None or other.width is None:
                    if self.width != other.width:
                        return (-1 if self.width is None else 1)
                else:
                    if self.width < other.width:
                        return -1
                    elif self.width > other.width:
                        return 1
                if self.height is None or other.height is None:
                    if self.height != other.height:
                        return (-1 if self.height is None else 1)
                else:
                    if self.height < other.height:
                        return -1
                    elif self.height > other.height:
                        return 1
                if self.t is None or other.t is None:
                    if self.t != other.t:
                        return (-1 if self.t is None else 1)
                else:
                    if self.t < other.t:
                        return -1
                    elif self.t > other.t:
                        return 1
                if self.v is None or other.v is None:
                    if self.v != other.v:
                        return (-1 if self.v is None else 1)
                else:
                    if self.v < other.v:
                        return -1
                    elif self.v > other.v:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_home.monitoring._t_View)

        __repr__ = __str__

    _M_home.monitoring._t_View = IcePy.defineStruct('::home::monitoring::View', View, (), (
        ('width', (), IcePy._t_int),
        ('height', (), IcePy._t_int),
        ('t', (), _M_home._t_DateTime),
        ('v', (), IcePy._t_string)
    ))

    _M_home.monitoring.View = View
    del View

_M_home.monitoring._t_Camera = IcePy.defineValue('::home::monitoring::Camera', Ice.Value, -1, (), False, True, None, ())

if 'CameraPrx' not in _M_home.monitoring.__dict__:
    _M_home.monitoring.CameraPrx = Ice.createTempClass()
    class CameraPrx(_M_home.DevicePrx):

        def getView(self, context=None):
            return _M_home.monitoring.Camera._op_getView.invoke(self, ((), context))

        def getViewAsync(self, context=None):
            return _M_home.monitoring.Camera._op_getView.invokeAsync(self, ((), context))

        def begin_getView(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.monitoring.Camera._op_getView.begin(self, ((), _response, _ex, _sent, context))

        def end_getView(self, _r):
            return _M_home.monitoring.Camera._op_getView.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_home.monitoring.CameraPrx.ice_checkedCast(proxy, '::home::monitoring::Camera', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_home.monitoring.CameraPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::home::monitoring::Camera'
    _M_home.monitoring._t_CameraPrx = IcePy.defineProxy('::home::monitoring::Camera', CameraPrx)

    _M_home.monitoring.CameraPrx = CameraPrx
    del CameraPrx

    _M_home.monitoring.Camera = Ice.createTempClass()
    class Camera(_M_home.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::home::Device', '::home::monitoring::Camera')

        def ice_id(self, current=None):
            return '::home::monitoring::Camera'

        @staticmethod
        def ice_staticId():
            return '::home::monitoring::Camera'

        def getView(self, current=None):
            raise NotImplementedError("servant method 'getView' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_home.monitoring._t_CameraDisp)

        __repr__ = __str__

    _M_home.monitoring._t_CameraDisp = IcePy.defineClass('::home::monitoring::Camera', Camera, (), None, (_M_home._t_DeviceDisp,))
    Camera._ice_type = _M_home.monitoring._t_CameraDisp

    Camera._op_getView = IcePy.Operation('getView', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_home.monitoring._t_View, False, 0), ())

    _M_home.monitoring.Camera = Camera
    del Camera

# Start of module home.monitoring.ptzCameras
_M_home.monitoring.ptzCameras = Ice.openModule('home.monitoring.ptzCameras')
__name__ = 'home.monitoring.ptzCameras'

if 'Rotation' not in _M_home.monitoring.ptzCameras.__dict__:
    _M_home.monitoring.ptzCameras.Rotation = Ice.createTempClass()
    class Rotation(object):
        def __init__(self, vertical=0, horizontal=0):
            self.vertical = vertical
            self.horizontal = horizontal

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.vertical)
            _h = 5 * _h + Ice.getHash(self.horizontal)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_home.monitoring.ptzCameras.Rotation):
                return NotImplemented
            else:
                if self.vertical is None or other.vertical is None:
                    if self.vertical != other.vertical:
                        return (-1 if self.vertical is None else 1)
                else:
                    if self.vertical < other.vertical:
                        return -1
                    elif self.vertical > other.vertical:
                        return 1
                if self.horizontal is None or other.horizontal is None:
                    if self.horizontal != other.horizontal:
                        return (-1 if self.horizontal is None else 1)
                else:
                    if self.horizontal < other.horizontal:
                        return -1
                    elif self.horizontal > other.horizontal:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_home.monitoring.ptzCameras._t_Rotation)

        __repr__ = __str__

    _M_home.monitoring.ptzCameras._t_Rotation = IcePy.defineStruct('::home::monitoring::ptzCameras::Rotation', Rotation, (), (
        ('vertical', (), IcePy._t_int),
        ('horizontal', (), IcePy._t_int)
    ))

    _M_home.monitoring.ptzCameras.Rotation = Rotation
    del Rotation

_M_home.monitoring.ptzCameras._t_CameraPTZ = IcePy.defineValue('::home::monitoring::ptzCameras::CameraPTZ', Ice.Value, -1, (), False, True, None, ())

if 'CameraPTZPrx' not in _M_home.monitoring.ptzCameras.__dict__:
    _M_home.monitoring.ptzCameras.CameraPTZPrx = Ice.createTempClass()
    class CameraPTZPrx(_M_home.monitoring.CameraPrx):

        def setRotation(self, r, context=None):
            return _M_home.monitoring.ptzCameras.CameraPTZ._op_setRotation.invoke(self, ((r, ), context))

        def setRotationAsync(self, r, context=None):
            return _M_home.monitoring.ptzCameras.CameraPTZ._op_setRotation.invokeAsync(self, ((r, ), context))

        def begin_setRotation(self, r, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.monitoring.ptzCameras.CameraPTZ._op_setRotation.begin(self, ((r, ), _response, _ex, _sent, context))

        def end_setRotation(self, _r):
            return _M_home.monitoring.ptzCameras.CameraPTZ._op_setRotation.end(self, _r)

        def getRotation(self, context=None):
            return _M_home.monitoring.ptzCameras.CameraPTZ._op_getRotation.invoke(self, ((), context))

        def getRotationAsync(self, context=None):
            return _M_home.monitoring.ptzCameras.CameraPTZ._op_getRotation.invokeAsync(self, ((), context))

        def begin_getRotation(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.monitoring.ptzCameras.CameraPTZ._op_getRotation.begin(self, ((), _response, _ex, _sent, context))

        def end_getRotation(self, _r):
            return _M_home.monitoring.ptzCameras.CameraPTZ._op_getRotation.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_home.monitoring.ptzCameras.CameraPTZPrx.ice_checkedCast(proxy, '::home::monitoring::ptzCameras::CameraPTZ', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_home.monitoring.ptzCameras.CameraPTZPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::home::monitoring::ptzCameras::CameraPTZ'
    _M_home.monitoring.ptzCameras._t_CameraPTZPrx = IcePy.defineProxy('::home::monitoring::ptzCameras::CameraPTZ', CameraPTZPrx)

    _M_home.monitoring.ptzCameras.CameraPTZPrx = CameraPTZPrx
    del CameraPTZPrx

    _M_home.monitoring.ptzCameras.CameraPTZ = Ice.createTempClass()
    class CameraPTZ(_M_home.monitoring.Camera):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::home::Device', '::home::monitoring::Camera', '::home::monitoring::ptzCameras::CameraPTZ')

        def ice_id(self, current=None):
            return '::home::monitoring::ptzCameras::CameraPTZ'

        @staticmethod
        def ice_staticId():
            return '::home::monitoring::ptzCameras::CameraPTZ'

        def setRotation(self, r, current=None):
            raise NotImplementedError("servant method 'setRotation' not implemented")

        def getRotation(self, current=None):
            raise NotImplementedError("servant method 'getRotation' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_home.monitoring.ptzCameras._t_CameraPTZDisp)

        __repr__ = __str__

    _M_home.monitoring.ptzCameras._t_CameraPTZDisp = IcePy.defineClass('::home::monitoring::ptzCameras::CameraPTZ', CameraPTZ, (), None, (_M_home.monitoring._t_CameraDisp,))
    CameraPTZ._ice_type = _M_home.monitoring.ptzCameras._t_CameraPTZDisp

    CameraPTZ._op_setRotation = IcePy.Operation('setRotation', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_home.monitoring.ptzCameras._t_Rotation, False, 0),), (), None, ())
    CameraPTZ._op_getRotation = IcePy.Operation('getRotation', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_home.monitoring.ptzCameras._t_Rotation, False, 0), ())

    _M_home.monitoring.ptzCameras.CameraPTZ = CameraPTZ
    del CameraPTZ

# End of module home.monitoring.ptzCameras

__name__ = 'home.monitoring'

# End of module home.monitoring

__name__ = 'home'

# Start of module home.manager
_M_home.manager = Ice.openModule('home.manager')
__name__ = 'home.manager'

if 'DeviceInfo' not in _M_home.manager.__dict__:
    _M_home.manager.DeviceInfo = Ice.createTempClass()
    class DeviceInfo(object):
        def __init__(self, Name='', id=0, identity='', category=''):
            self.Name = Name
            self.id = id
            self.identity = identity
            self.category = category

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.Name)
            _h = 5 * _h + Ice.getHash(self.id)
            _h = 5 * _h + Ice.getHash(self.identity)
            _h = 5 * _h + Ice.getHash(self.category)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_home.manager.DeviceInfo):
                return NotImplemented
            else:
                if self.Name is None or other.Name is None:
                    if self.Name != other.Name:
                        return (-1 if self.Name is None else 1)
                else:
                    if self.Name < other.Name:
                        return -1
                    elif self.Name > other.Name:
                        return 1
                if self.id is None or other.id is None:
                    if self.id != other.id:
                        return (-1 if self.id is None else 1)
                else:
                    if self.id < other.id:
                        return -1
                    elif self.id > other.id:
                        return 1
                if self.identity is None or other.identity is None:
                    if self.identity != other.identity:
                        return (-1 if self.identity is None else 1)
                else:
                    if self.identity < other.identity:
                        return -1
                    elif self.identity > other.identity:
                        return 1
                if self.category is None or other.category is None:
                    if self.category != other.category:
                        return (-1 if self.category is None else 1)
                else:
                    if self.category < other.category:
                        return -1
                    elif self.category > other.category:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_home.manager._t_DeviceInfo)

        __repr__ = __str__

    _M_home.manager._t_DeviceInfo = IcePy.defineStruct('::home::manager::DeviceInfo', DeviceInfo, (), (
        ('Name', (), IcePy._t_string),
        ('id', (), IcePy._t_int),
        ('identity', (), IcePy._t_string),
        ('category', (), IcePy._t_string)
    ))

    _M_home.manager.DeviceInfo = DeviceInfo
    del DeviceInfo

if '_t_DeviceSequence' not in _M_home.manager.__dict__:
    _M_home.manager._t_DeviceSequence = IcePy.defineSequence('::home::manager::DeviceSequence', (), _M_home.manager._t_DeviceInfo)

_M_home.manager._t_DeviceManager = IcePy.defineValue('::home::manager::DeviceManager', Ice.Value, -1, (), False, True, None, ())

if 'DeviceManagerPrx' not in _M_home.manager.__dict__:
    _M_home.manager.DeviceManagerPrx = Ice.createTempClass()
    class DeviceManagerPrx(_M_home.DevicePrx):

        def addDevice(self, di, context=None):
            return _M_home.manager.DeviceManager._op_addDevice.invoke(self, ((di, ), context))

        def addDeviceAsync(self, di, context=None):
            return _M_home.manager.DeviceManager._op_addDevice.invokeAsync(self, ((di, ), context))

        def begin_addDevice(self, di, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.manager.DeviceManager._op_addDevice.begin(self, ((di, ), _response, _ex, _sent, context))

        def end_addDevice(self, _r):
            return _M_home.manager.DeviceManager._op_addDevice.end(self, _r)

        def getDevice(self, id, context=None):
            return _M_home.manager.DeviceManager._op_getDevice.invoke(self, ((id, ), context))

        def getDeviceAsync(self, id, context=None):
            return _M_home.manager.DeviceManager._op_getDevice.invokeAsync(self, ((id, ), context))

        def begin_getDevice(self, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.manager.DeviceManager._op_getDevice.begin(self, ((id, ), _response, _ex, _sent, context))

        def end_getDevice(self, _r):
            return _M_home.manager.DeviceManager._op_getDevice.end(self, _r)

        def getAllDevices(self, context=None):
            return _M_home.manager.DeviceManager._op_getAllDevices.invoke(self, ((), context))

        def getAllDevicesAsync(self, context=None):
            return _M_home.manager.DeviceManager._op_getAllDevices.invokeAsync(self, ((), context))

        def begin_getAllDevices(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.manager.DeviceManager._op_getAllDevices.begin(self, ((), _response, _ex, _sent, context))

        def end_getAllDevices(self, _r):
            return _M_home.manager.DeviceManager._op_getAllDevices.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_home.manager.DeviceManagerPrx.ice_checkedCast(proxy, '::home::manager::DeviceManager', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_home.manager.DeviceManagerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::home::manager::DeviceManager'
    _M_home.manager._t_DeviceManagerPrx = IcePy.defineProxy('::home::manager::DeviceManager', DeviceManagerPrx)

    _M_home.manager.DeviceManagerPrx = DeviceManagerPrx
    del DeviceManagerPrx

    _M_home.manager.DeviceManager = Ice.createTempClass()
    class DeviceManager(_M_home.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::home::Device', '::home::manager::DeviceManager')

        def ice_id(self, current=None):
            return '::home::manager::DeviceManager'

        @staticmethod
        def ice_staticId():
            return '::home::manager::DeviceManager'

        def addDevice(self, di, current=None):
            raise NotImplementedError("servant method 'addDevice' not implemented")

        def getDevice(self, id, current=None):
            raise NotImplementedError("servant method 'getDevice' not implemented")

        def getAllDevices(self, current=None):
            raise NotImplementedError("servant method 'getAllDevices' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_home.manager._t_DeviceManagerDisp)

        __repr__ = __str__

    _M_home.manager._t_DeviceManagerDisp = IcePy.defineClass('::home::manager::DeviceManager', DeviceManager, (), None, (_M_home._t_DeviceDisp,))
    DeviceManager._ice_type = _M_home.manager._t_DeviceManagerDisp

    DeviceManager._op_addDevice = IcePy.Operation('addDevice', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_home.manager._t_DeviceInfo, False, 0),), (), None, ())
    DeviceManager._op_getDevice = IcePy.Operation('getDevice', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), _M_home.manager._t_DeviceInfo, False, 0), ())
    DeviceManager._op_getAllDevices = IcePy.Operation('getAllDevices', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_home.manager._t_DeviceSequence, False, 0), ())

    _M_home.manager.DeviceManager = DeviceManager
    del DeviceManager

# End of module home.manager

__name__ = 'home'

# End of module home
